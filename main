
from hub import light_matrix, port, motion_sensor, button
import runloop, motor, motor_pair

motor_pair.pair(motor_pair.PAIR_1, port.D, port.A)
# Definição dos pares de motores de locomoção

def conversor(x):
    y = (360 * x) / 17.5
    return y
# Conversor de graus para cm
async def pausa (tempo):
    await runloop.sleep_ms(tempo)

async def moverAz (distancia,velocidade,aceleracao,kp, referencia):
    def conversor(distancia):
        graus_motor=(distancia*360)/17.5
        return graus_motor

    motor.reset_relative_position(port.A,0)
    distancia_total = conversor(distancia)

    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo



    angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])
    erro_angulo = referencia-angulo_atual

    print (erro_angulo)

    if abs(erro_angulo)>0:
        await giroAz(referencia, 0.5,0,0)
        while distancia_total>abs(motor.relative_position(port.A)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

    else:
        while distancia_total>abs(motor.relative_position(port.A)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

async def giro (angulo, kp):
    if angulo>0:
        while abs(angulo)>=abs(motion_sensor.tilt_angles()[0]):
            erro = angulo - motion_sensor.tilt_angles()[0]
            correcao = erro*kp
            motor_pair.move_tank(motor_pair.PAIR_1, round(correcao*-1), round(correcao))
    else:
        while abs(angulo)>=abs(motion_sensor.tilt_angles()[0]):
            erro = abs(angulo) - abs(motion_sensor.tilt_angles()[0])
            correcao = erro*kp
            motor_pair.move_tank(motor_pair.PAIR_1, round(correcao), round(correcao*-1))
        motor_pair.stop(motor_pair.PAIR_1)

async def giroAz(angulo, kp, ki,kd):
    # Recupera o valor atual do sensor de giroscópio em decigraus
    angulo_atual = motion_sensor.tilt_angles()[0]

    # Função para ajustar o ângulo para o intervalo [-1790, 1790]
    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    # Ajusta os ângulos de destino para o intervalo [-1790, 1790]
    angulo_desejado = ajustar_angulo(angulo)
    angulo_atual = ajustar_angulo(angulo_atual)
    integral = 0
    last_error = 0

    # Determina a direção de rotação (sentido horário ou anti-horário)
    while abs(angulo_desejado - angulo_atual) > 10:# Um valor pequeno para precisão
        erro = angulo_desejado - angulo_atual
        integral=integral+erro
        derivativa= last_error - motion_sensor.tilt_angles()[0]

        correcao = erro * kp + integral * ki + derivativa*kd
        if integral>100:
            integral = 100

        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao * -1), round(correcao))
        last_error = erro
        angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])# Atualiza o ângulo atual

    motor_pair.stop(motor_pair.PAIR_1)
    print (integral)


async def start1():
    #barquinho
    await moverAz(39,500,500,0,0)
    await giroAz(-420,0.5,0,0)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,120,0,velocity=200)
    await motor.run_for_degrees(port.E,900,400)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,130,0,velocity=-200)
    motor.run_for_degrees(port.E,-170,500)
    await moverAz(25.5,900,500,0,-120)
    await motor.run_for_degrees(port.E,300,400)
    await motor.run_for_degrees(port.C,120,1100)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1600,-1100,-750)


async def start2():
    #primeira travessia
    await moverAz(23,1000,500,0,0)
    await giroAz(350,0.7,0,0)
    await moverAz(38,1000,500,0,350)
    await moverAz(15,500,5000,0,0)
    await motor.run_for_degrees(port.C,500,1100,acceleration=1000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,170,0,velocity=-500)
    await pausa(300)
    await moverAz(57,500,2000,0,650)
    await motor.run_for_degrees(port.E,150,1000,acceleration=10000)
    await giroAz(1100,0.7,0,0)
    await moverAz(35,900,5000,0,1100)
    await moverAz(70,1100,100000,0,1550)

    

async def start3():
    #start M-01(levanta árvore),M-02(Tubarão),M-04(Coleta Mergulhador)
    await moverAz(49,600,3000,0.2,0)
    await moverAz(1,300,5000,0,0)
    await motor.run_for_degrees(port.C,-600,1100) #Cremalheira levanta arvore
    await pausa(200)
    await motor.run_for_degrees(port.C,100,800) #Abaixa a cremalhei
    await motor.run_for_degrees(port.E,-600,500) #Coleta mergulhador
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,1100,0,velocity=-1100, acceleration=10000)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,300,0,1100)

async def start4():
    #entrega do mergulhador e levantamento do mastro
    await moverAz(55,600,1000,0.2,0)
    await giroAz(-510,0.5,0,0)
    await moverAz(40.7,600,1000,0,-510)
    await motor.run_for_degrees(port.C,-500,1000,acceleration=10000)

    await pausa(200)
    await moverAz(50,-500,5000,0,-510)
    motor.run_for_degrees(port.C,270,1000)

    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,1000,0,velocity=-600)
    await moverAz(20,800,5000,0,-880)

    await motor.run_for_degrees(port.E,500,1100,acceleration=10000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,480,0,velocity=-700)
    #await moverAz(6,-800,5000,0,-880)
    await moverAz(60,-1100,10000,0,-200)
    '''await moverAz (5,200, 200, 0.5, -865)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,500,0,velocity=400)
    await motor.run_for_degrees(port.E,200,1000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,560,0,velocity=-500)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,350,-1100,1100)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,1400,0,velocity=-1100,acceleration=10000)'''



async def start5():
    #tridente
    await moverAz(54,600,1000,0,0)
    await giroAz(490,1,00000.1,0)
    await moverAz(22,500,1000,0,490)
    await motor.run_for_degrees(port.E,-300,300)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,540,0,velocity=-230)
    await moverAz(100,-1100,10000,0,10)



async def start6():
    #travessia
    await moverAz(93, 1100,1000,0.5,0)
    await motor.run_for_degrees(port.C,300,1100)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,400,0,velocity=-200)
    #motor_pair.move_for_degrees(motor_pair.PAIR_1,300,0,velocity=-100)
    await pausa(300)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,20,0,velocity=-100)
    await motor.run_for_degrees(port.C,-300,600)
    motor.run_for_degrees(port.E,200,500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,1400,0,velocity=-1100)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,800,0,velocity=-1100)

async def start7():
    #travessia 2
    await moverAz(136,1100,5000,0.5,0)
    await moverAz(30,-900,5000,0,-540)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,760,1100,1100)


async def start8():
    #sonar
    await moverAz(50,900,10000,0,0)
    await moverAz(31,900,10000,0,200)
    await pausa(300)
    await moverAz(15,1000,10000,0,0)
    await moverAz(7,-700,10000,0,0)
    await motor.run_for_degrees(port.C,800,1000)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1700,-1100,900)

async def start9():
    #baleia
    await moverAz(65,800,5000,0,0) #vai a baleia
    await giroAz(-320,0.5,0.00001,0)
    await moverAz(8,300,500,0,-320)
    await motor.run_for_degrees(port.E,500,-300,acceleration=5000)
    await pausa(1000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,250,0,velocity=-500)
    await moverAz(47,-900,5000,0,-900)
    await moverAz(26,-500,5000,0,-1400)
    await motor.run_for_degrees(port.C,600,1000,acceleration=10000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,300,0,velocity=1100)
    await moverAz(22,-700,5000,0,-750)
    await giroAz(-900,0.5,0,0)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,200,1100,1100)
    '''await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,250,200,200)

    await motor.run_for_degrees(port.E,300,500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,300,0,velocity=-500)
    await moverAz(34,-500,500,0,-1070)
    await motor.run_for_degrees(port.E,1100,1100)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,520,-500,-500)
    await moverAz(13,-500,500,0,-1300)
    await motor.run_for_degrees(port.C,500,1000)
    await pausa(3000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,300,0,velocity=1100)'''



starts = [start1, start2, start3,start4,start6,start7,start8,start9]
indice_atual = 3


async def mudar():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                motion_sensor.reset_yaw(0)

                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1
                    await pausa(1)

async def main():
    light_matrix.write("X")
    while indice_atual < len(starts):
        await mudar()

runloop.run(main())
