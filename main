from hub import light_matrix, port, motion_sensor, button
import runloop, motor, motor_pair

motor_pair.pair(motor_pair.PAIR_1, port.D, port.A)
# Definição dos pares de motores de locomoção

def conversor(x):
    y = (360 * x) / 17.5
    return y
# Conversor de graus para cm
async def pausa (tempo):
    await runloop.sleep_ms(tempo)


async def mover(distancia,velocidade, kp, ki):
    integral = 0
    motion_sensor.reset_yaw(0)
    limite = conversor(distancia)
    await pausa(400)
    motor.reset_relative_position(port.A, 0)
    erro = 0-motion_sensor.tilt_angles()[0]

    integral = integral + erro
    correcao = (erro*kp) + (integral*ki)
    motor_pair.move_tank(motor_pair.PAIR_1,velocidade-correcao,velocidade+correcao)# Ajusta a velocidade
    while abs (motor.relative_position(port.A)) < limite:
        pass# Aguardar o motor se mover até o limite
    motor_pair.stop(motor_pair.PAIR_1)# Para o motor após o movimento

async def curva(angulo, kp, ki):
    # Usa o sensor de inclinação para controlar a curva
    motion_sensor.reset_yaw(0)
    integral = 0
    while True:
        erro = angulo - motion_sensor.tilt_angles()[0]# Calcula o erro de inclinação
        integral = integral + erro
        if integral>200:
            integral = 100
        correcao= (erro * kp) + (integral*ki)# Ajusta a velocidade com o valor proporcional

        # Movimenta o robô na direção necessária
        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao * -1), round(correcao))

        # Verifica se o erro é pequeno o suficiente para parar
        if abs(erro) < 0.01:# Um pequeno erro de tolerância para parar a curva
            break# Sai do loop quando a curva for concluída
    motor_pair.stop(motor_pair.PAIR_1)# Para os motores ao final da curva




async def start1():
    #start M-01(levanta árvore),M-02(Tubarão),M-04(Coleta Mergulhador)
    await pausa (2)
    await mover(55,400,0,0)#Vai até as missões
    await motor.run_for_degrees(port.C,-330,100) #Cremalheira levanta arvore
    await motor.run_for_degrees(port.C,80,100) #Abaixa a cremalheira
    await motor.run_for_degrees(port.E,-500,400) #Coleta mergulhador
    await mover(9,-200,1,0) #se distancia das missoes para fazer curvga
    await pausa(200)
    await curva (-340,0.7,0) #faz curva para coletar os krills,coral e amostra d´agua
    await pausa(100)
    await mover (60,-1000,1,0) #volta para a base


async def start2():
    #start mastro; #segunda linha dps  do primeira preta
    await mover (56,400,0,0) # vai ate o mastro
    await curva(-900,0.7,0)
    await mover(14,250,0,0)
    await mover(15,-400,0,0)
async def start3():
    #tridente
    await mover(20,1,1,1)


async def start4():
    #travessia
    await mover(46,500,0,0) #entrega as amostras (garrafa de agua, leito marinho, tridente e báu)
    await motor.run_for_degrees(port.E,-400,800) #abaixa a garra que leva o navio
    await mover(48,200,1,0) # reta que leva o navio ate o porto
    await motor.run_for_degrees(port.E,400,600) #levanta a garra
    await mover(25,-1000,0,0) #da ré para a garra se direcionar a parte traseira do navio
    await motor.run_for_degrees(port.E,-400,500) #abaixa a garra para levar o navio por trás
    await mover(31,1000,0,0) # entrega o navio
    await mover(23,-200,0,0)
    await motor.run_for_degrees(port.E,600,600)
    await curva(300,0.6,0)
    await mover(30,500,0,0)
    await curva(-500,0.7,0)
    await mover(30,600,0,0)
    await curva(-300,0.7,0)
    await mover(30,500,0,0)
    await motor



async def start5():
    #barquinho
    await mover(60,300,1,0) #reta que se direciona ate o barco e que tira o coral da frente da M-13
    await mover(18,-200,1,0) # depois que tira o coral ele volta para a M-13
    await curva(-480,0.2,0.000001) #curva para o barco
    await mover(4,100,1,0) #viga bate no barco para a garra ir por baixo do barco
    await motor.run_for_degrees(port.E,700,400) #gira a garra
    await curva(480,0.5, 0.00005) #curva para fazer a coleta da amostra de plancton e dos krills
    await mover(18,600,1, 0) # reta para fazer as coletas
    await curva(-260,0.7, 0.00001) #curva para pegfar a amostra de plâncton
    await motor.run_for_degrees(port.E,400,600) #gira a garra para pegar a amostra
    await mover(3,-1000,1,0)
    await motor.run_for_degrees(port.C,200,200) #derruba a "caixa de coleta"
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,80,-100,100) #coleta tudo com a "caixa de coleta"
    await mover(60,-1100,0,0) #volta a base

async def start6():
    #sonar e polvo

  await mover(70,600,0,0) #vai ate o sonar
  await curva(250,0.6,0) #curva para o sonar
  await mover(30,600,0,0) # se alinha ao sonar
  await mover(8,-400,0,0) # se ajusta para realizar o sonar
  await motor.run_for_degrees(port.C,200,400) #realiza o sonar
  await mover(50,-800,0,0) # vai ate o polvo
  await curva(400,0.7,0) #se ajusta para o polvo
  await mover(26,800,0,0) # pega o polvo
  await mover(40,-1000,0,0) #volta para à base


async def start7():
    #baleia
    await mover(68.5,400,2,0) #vai a baleia
    await curva(-390,0.6,0.000001) #curva para ir a baleia
    await mover (11,150,0,0) #Realiza a baleia
    await mover(9,-200,0,0) #se afasta da baleia
    await curva(-60,0.5,0.000005) #se ajusta para ir a compartilhada
    await mover(6,-200,1,0)# se ajusta para a compartilhada
    await curva(-530,0.5,0.000001) #se ajusta para a compartilhada
    await mover(37,-1000,1,0) # vai ate a compartilhada
    await curva(-400,0.5,0.000001) #curva de ajuste para se alinhar com a compartilhhada
    await mover(13,-300,1,0) #chega na compartilhada
    await motor.run_for_degrees(port.C,700,400) #cremalheira levanta para realizar a compartilhada
    await pausa(5000) # espera o submarino descer
    await mover(5,300,0,0) #entrega o polvo e se afsta da compartilhada



starts = [start1, start2, start3,start4,start5,start6,start7]
indice_atual = 1

async def mudar():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1
                    await pausa(3)


async def main():
    light_matrix.write("X")
    while indice_atual < len(starts):
        await mudar()
        await pausa(3)




runloop.run(main())
