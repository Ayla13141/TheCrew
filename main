from hub import light_matrix, port, motion_sensor, button
import runloop, motor, motor_pair


motor_pair.pair(motor_pair.PAIR_1, port.D, port.A)
# DefiniÃ§Ã£o dos pares de motores de locomoÃ§Ã£o

def conversor(x):
    y = (360 * x) / 17.5
    return y
# Conversor de graus para cm
async def pausa (tempo):
    await runloop.sleep_ms(tempo)

async def moverAz (distancia,velocidade,aceleracao,kp, referencia):
    def conversor(distancia):
        graus_motor=(distancia*360)/17.5
        return graus_motor

    motor.reset_relative_position(port.A,0)
    distancia_total = conversor(distancia)

    def ajustar_angulo(angulo):
        # Corrige o valor do Ã¢ngulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo



    angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])
    erro_angulo = referencia-angulo_atual

    if abs(erro_angulo)>20:
        await giroAz(referencia, 0.5,0,0)
        while distancia_total>abs(motor.relative_position(port.A)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

    else:
        while distancia_total>abs(motor.relative_position(port.A)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

async def giroAz(angulo, kp, ki,kd):
    # Recupera o valor atual do sensor de giroscÃ³pio em decigraus
    angulo_atual = motion_sensor.tilt_angles()[0]

    # FunÃ§Ã£o para ajustar o Ã¢ngulo para o intervalo [-1790, 1790]
    def ajustar_angulo(angulo):
        # Corrige o valor do Ã¢ngulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    # Ajusta os Ã¢ngulos de destino para o intervalo [-1790, 1790]
    angulo_desejado = ajustar_angulo(angulo)
    angulo_atual = ajustar_angulo(angulo_atual)
    integral = 0
    last_error = 0

    # Determina a direÃ§Ã£o de rotaÃ§Ã£o (sentido horÃ¡rio ou anti-horÃ¡rio)
    while abs(angulo_desejado - angulo_atual) > 10:# Um valor pequeno para precisÃ£o
        erro = angulo_desejado - angulo_atual
        integral=integral+erro
        derivativa= last_error - motion_sensor.tilt_angles()[0]

        correcao = erro * kp + integral * ki + derivativa*kd
        if integral>100:
            integral = 100

        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao * -1), round(correcao))
        last_error = erro
        angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])# Atualiza o Ã¢ngulo atual

    motor_pair.stop(motor_pair.PAIR_1)

async def start1():
    #barquinho
    await moverAz(29,800,5000,0,0)#sai da base em direção a o barquinho
    await giroAz(-350,0.5,0,0)#se ajusta para realizar o barquinho
    await pausa(100)
    await moverAz(7.5,400,3000,0,-350)#sai da base em direção a o barquinho

    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,120,0,velocity=1100)#vai a o barquinho
    await motor.run_for_degrees(port.E,750,1100, acceleration=10000)#realiza o barquinho
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,170,0,velocity=-500)#se afasta do barquinho
    await pausa(100)
    motor.run_for_degrees(port.E,-100,1100)#levanta garra para coletar amostra de placton
    await giroAz(-90,0.5,0,0)
    await moverAz(26,800,3000,0,-120)#vai ate a amostra de plancton
    await motor.run_for_degrees(port.E,370,1100)#desce a garra para a coleta da amostra
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,60,0,velocity=-200)
    await motor.run_for_degrees(port.C,150,1100,acceleration=10000)#desce garra que coleta krills e coral
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1070,-1100,-800)#volta a base
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,630,0,velocity=400)
    await pausa(200)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,1100,0,velocity=-1100)



async def start2():
    #primeira travessia
    '''await moverAz(28,700,5000,0,0)#sai da base
    await giroAz(370,0.6,0,0)#se ajusta a o sonar
    await moverAz(39,700,5000,0,370)#vai ate o sonar
    await moverAz(13,400,5000,0,10)#chega no sonar
    await motor.run_for_degrees(port.C,-500,1100,acceleration=10000)#realiza o sonar
    #await motor.run_for_degrees(port.C,150,1100,acceleration=1000)#volta a garra que realiza o sonar
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,100,0,velocity=-400)#se afasta do sonar
    await pausa(100)'''
    '''await giroAz(700,0.6,0,0)
    await moverAz(43,400,2000,0,700)#vai ate o leito marinho, #era 610'''
    #await giroAz(900,0.5,0,0)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,60,0,velocity=600)
    ''' await motor.run_for_degrees(port.E,-300,1100)

    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,250,500,500)'''

    '''await moverAz(48.5,500,500,0,900)
    await motor.run_for_degrees(port.E,-680,1000,acceleration=10000)#coleta leito marinho
    await moverAz(15,500,500,0.2,900)
    await motor.run_for_degrees(port.E,670,1000,acceleration=10000)#coleta leito marinho
    await moverAz(29,500,500,0.2,900)
    await giroAz(1620,0.7,0,0)#curva de ajuste para coletar krill e corais
    await moverAz(70,1100,10000,0,1620)#se ajusta para coletas as coisas

    await moverAz(31,1100,1000,0,1160)#se ajusta para coletas as coisas
    await moverAz(73,1100,10000,0,1610)#volta a base'''

    await moverAz(2,600,5000,0,0)
    await giroAz(450,0.7,0,0)
    await moverAz(92.8,1000,5000,0.2,450)
    await giroAz(0,0.7,0,0)
    await pausa (100)
    await moverAz(11,500,5000,0,0)
    await motor.run_for_degrees(port.C,40,1100,acceleration=10000)#coleta leito marinho
    await motor.run_for_degrees(port.E,500,1100,acceleration=3000)#coleta leito marinho
    motor.run_for_degrees(port.C,-250,1100,acceleration=5000)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,260,-400,-400)
    #await moverAz(9,-600,5000,0,0)
    #await pausa(100)
    await giroAz(-900,0.5,0,0)
    await moverAz(22,-1100,5000,0,-900)
    motor.run_for_degrees(port.C,-250,1100,acceleration=10000)
    await giroAz(-350,0.7,0,0)
    await motor.run_for_degrees(port.C,200,1100,acceleration=10000)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1759,-1100,-950)


async def start3():
    #start M-01(levanta Ã¡rvore),M-02(TubarÃ£o),M-04(Coleta Mergulhador)
    await moverAz(51.7,400,3000,0.2,0)#vai ate o berçario
    await motor.run_for_degrees(port.C,-600,1100,acceleration=10000) #Cremalheira levanta berçario
    await pausa(200)
    await motor.run_for_degrees(port.E,-800,1000) #Coleta mergulhador e realiza ramos de coral
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,1100,0,velocity=-1100, acceleration=10000)#volta a base
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,400,0,1100)#curva de ajuste para entrar totalmente na base

async def start4():
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,1310,0,velocity=600, acceleration=7000)#volta a base
    await moverAz(48,400,3000,0.1,0)
    await giroAz(-490,0.8,0.000002,0)
    await moverAz(46,600,5000,0,-490)
    await motor.run_for_degrees(port.C,-500,1100,acceleration=10000) #Coleta mergulhador e realiza ramos de coral
    await moverAz(45,-500,4000,0,-520)
    await giroAz(-900,0.7,0,0)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,600,0,velocity=400, acceleration=10000)

    await motor.run_for_degrees(port.E,100,1000) #Coleta mergulhador e realiza ramos de coral
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,50,0,velocity=-50, acceleration=10000)#volta a base
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,630,0,velocity=-600, acceleration=10000)#volta a bas
    motion_sensor.reset_yaw(0)
    await giroAz(700,0.7,0,0)

    await motor_pair.move_for_degrees(motor_pair.PAIR_1,1700,0,velocity=-1100, acceleration=10000)#volta a base



    #levantamento do mastr
    '''await motor_pair.move_for_degrees(motor_pair.PAIR_1,1150,0,velocity=500)

    await giroAz(-900,0.7,0,0)
    await pausa(300)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,450,0,velocity=300)
    await pausa(300)
    await motor.run_for_degrees(port.E,100,1000)
    await pausa(200)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,350,0,velocity=-700)
    motion_sensor.reset_yaw(0)
    await giroAz(-1200,1,0,0)
    await moverAz(30,1100,10000,0,-1200)'''





async def start5():
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,100,0,velocity=-100)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,120,0,velocity=1100)


async def start6():
    #tridente
    await moverAz(47.5,1000,1000,0,0)
    await giroAz(480,0.7,00000.1,0)
    await pausa(100)
    await moverAz(22,500,1000,0,480)
    await motor.run_for_degrees(port.E,-400,1100)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,500,0,velocity=-230)
    await giroAz(10,1.5,0,0)
    await moverAz(70,-1100,10000,0,10)



async def start7():
    #travessia
    await moverAz(27, 300,5000,0,0)
    await moverAz(67, 1000,5000,0,0)
    await motor.run_for_degrees(port.C,300,1100)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,430,0,velocity=-300)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,10,0,velocity=-100)
    await pausa(300)
    #programaÃ§Ã£o com curva
    await motor.run_for_degrees(port.C,-400,3000,acceleration=10000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,200,0,velocity=-1100)
    await motor.run_for_degrees(port.E,250,1100)
    await giroAz(600, 1,0,0)
    await moverAz(8.5, 1000, 10000, 0,600)
    await giroAz(100, 0.7,0,0)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,2450,1100,950)

    #volta pra base


    '''#motor_pair.move_for_degrees(motor_pair.PAIR_1,300,0,velocity=-100)
    await pausa(300)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,20,0,velocity=-100)
    await motor.run_for_degrees(port.C,-300,600)
    motor.run_for_degrees(port.E,200,500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,1400,0,velocity=-1100)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,800,0,velocity=-1100)'''

async def start8():
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,70,0,velocity=50)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,110,0,velocity=-1100)



async def start9():
    #baleia
    await moverAz(61.5,900,5000,0,0) #vai a baleia
    await giroAz(-380,1.2,0.00001,0)#gira para a baleia
    await moverAz(13,300,500,0,-380)#ativa a baleia
    await motor.run_for_degrees(port.E,-300,-1100,acceleration=5000)#derruba os krills
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,200,0,velocity=-500)#se afasta da baleia
    await giroAz(-900,0.7,0,0)#gira para fazer o sonar
    await moverAz(22,-800,5000,0,-900)#vai ate a compartilhada
    await motor.run_for_degrees(port.C,520,1100)#realiza o sonar
    await motor.run_for_degrees(port.C,-100,1100)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,560,0,velocity=-1100)
    await giroAz(-1400,0.7,0,0)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,370,-500,-500) #chega na compartilhada e realiza a compartilhada
    await pausa(500)#pausa para o submarino ir para o outro lado
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,300,0,velocity=1100)#sai da compartilhada'''


starts = [start1, start2, start3,start4,start5,start6,start7,start9]
indice_atual = 3


async def mudar():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                motion_sensor.reset_yaw(0)

                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1
                    await pausa(1)

async def main():
    light_matrix.write("T")
    while indice_atual < len(starts):
        await mudar()

runloop.run(main())
