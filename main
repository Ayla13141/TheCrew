
from hub import light_matrix, port, motion_sensor, button
import runloop, motor, motor_pair

motor_pair.pair(motor_pair.PAIR_1, port.D, port.A)
# Definição dos pares de motores de locomoção

def conversor(x):
    y = (360 * x) / 17.5
    return y
# Conversor de graus para cm
async def pausa (tempo):
    await runloop.sleep_ms(tempo)

async def moverAz (distancia,velocidade,aceleracao,kp, referencia):
    def conversor(distancia):
        graus_motor=(distancia*360)/17.5
        return graus_motor

    motor.reset_relative_position(port.A,0)
    distancia_total = conversor(distancia)

    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])
    erro_angulo = referencia-angulo_atual

    print (erro_angulo)

    if abs(erro_angulo)>0:
        await giroAz(referencia, 0.5)
        while distancia_total>abs(motor.relative_position(port.A)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

    else:
        while distancia_total>abs(motor.relative_position(port.A)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)



async def giro (angulo, kp):
    if angulo>0:
        while abs(angulo)>=abs(motion_sensor.tilt_angles()[0]):
            erro = angulo - motion_sensor.tilt_angles()[0]
            correcao = erro*kp
            motor_pair.move_tank(motor_pair.PAIR_1, round(correcao*-1), round(correcao))
    else:
        while abs(angulo)>=abs(motion_sensor.tilt_angles()[0]):
            erro = abs(angulo) - abs(motion_sensor.tilt_angles()[0])
            correcao = erro*kp
            motor_pair.move_tank(motor_pair.PAIR_1, round(correcao), round(correcao*-1))
        motor_pair.stop(motor_pair.PAIR_1)

async def giroAz(angulo, kp):
    # Recupera o valor atual do sensor de giroscópio em decigraus
    angulo_atual = motion_sensor.tilt_angles()[0]

    # Função para ajustar o ângulo para o intervalo [-1790, 1790]
    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    # Ajusta os ângulos de destino para o intervalo [-1790, 1790]
    angulo_desejado = ajustar_angulo(angulo)
    angulo_atual = ajustar_angulo(angulo_atual)

    # Determina a direção de rotação (sentido horário ou anti-horário)
    while abs(angulo_desejado - angulo_atual) > 10:# Um valor pequeno para precisão
        erro = angulo_desejado - angulo_atual
        correcao = erro * kp
        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao * -1), round(correcao))
        angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])# Atualiza o ângulo atual

    motor_pair.stop(motor_pair.PAIR_1)





async def start1():
    #start M-01(levanta árvore),M-02(Tubarão),M-04(Coleta Mergulhador)
    await moverAz(50,600,5000,0.4,0)
    await moverAz(2,300,5000,0,0)
    await motor.run_for_degrees(port.C,-500,700) #Cremalheira levanta arvore
    await pausa(1000)
    await motor.run_for_degrees(port.C,300,500) #Abaixa a cremalheira
    await motor.run_for_degrees(port.E,-600,500) #Coleta mergulhador
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,350,0,velocity=-200)
    await motor.run_for_degrees(port.E,500,1000)
    await motor.run_for_degrees(port.C,200,1000)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,320,400,-400)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1500,-800,-1100)
    #await giroAz(-320,1.2)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,1300,0,velocity=-1100,acceleration=10000)'''


async def start2():
    #start mastro
    await moverAz (50,500,500,0.5,0) # vai ate o mastro
    await giroAz(-900,0.5)
    await moverAz(20,150,100,0,-900)
    await motor.run_for_degrees(port.E,200,500)
    await pausa(500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,475,0,velocity=-400)
    await moverAz(70,-1100,10000,0,-100)


async def start3():
    #entrega mergulhador
    await motor.run_for_degrees(port.E,-500,1100)
    await moverAz(61.5,600,1000,0,0)
    await moverAz(35,600,1000,0,-550)
    await motor.run_for_degrees(port.C,-450,900)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,200,0,velocity=300)
    await motor.run_for_degrees(port.E,1100,1100)
    await moverAz(16,300,500,0,-1200)
    await motor.run_for_degrees(port.C,400,900)
    while (abs(motion_sensor.tilt_angles()[0])<1780):
        motor_pair.move_tank(motor_pair.PAIR_1,300,-300)
    
    motor_pair.stop(motor_pair.PAIR_1)

    await moverAz(15,1100,10000,0,900)
    await moverAz(50,-1100,10000,0,-200)
'''
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,150,0,velocity=-500)
    await giroAz(-400,1)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,2000,0,velocity=-1100)'''




async def start4():
    #tridente
    await moverAz(50,300,10000,0,0)
    await moverAz(19,300,500,0,410)
    await motor.run_for_degrees(port.E,-500,1100)
    #await moverAz(15,-50,500,0,410)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,300,0,velocity=-50)
    await motor.run_for_degrees(port.E,600,1000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,100,0,velocity=-50)
    await giroAz(200,1)
    await  motor_pair.move_for_degrees(motor_pair.PAIR_1,1200,0,velocity=-1000)




async def start5():
    #travessia
    await motor.run_for_degrees(port.E,-200,500)
    await moverAz(92,600,1000,0.5,0)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,450,0,velocity=-500)
    await motor.run_for_degrees(port.E,200,500)
    await moverAz(9,-700,500,0,0)
    await moverAz(25,500,500,0,350)
    await moverAz(65,900,500,0,50)
    await moverAz(25,-700,500,0,-500)
    await motor.run_for_degrees(port.C,500,1000)
    await moverAz(20,1100,10000,0,-500)

async def start6():
    #barquinho
    await moverAz(42,300,500,0,0)
    await giroAz(-430,0.5)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,110,0,velocity=200)
    await motor.run_for_degrees(port.E,700,600)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,120,0,velocity=-200)
    await moverAz(24,500,500,0,-180)
    await motor.run_for_degrees(port.E,500,1000)
    await motor.run_for_degrees(port.C,300,1000)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1500,-900,-700)
async def start7():
    #baleia
    await moverAz(67,400,500,0,0) #vai a baleia
    await giroAz(-330,0.7)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,240,200,200)
    await pausa(2000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,400,0,velocity=-200)
    await giroAz(-1200,0.5)
    await moverAz(28,-300,500,0,-1150)
    await motor.run_for_degrees(port.E,1000,1000)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,110,0,velocity=-200)
    await moverAz(17,-200,500,0,-900)
    await moverAz(15,-300,500,0,-1400)
    await motor.run_for_degrees(port.C,1000,1100)
    await pausa(2000)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,250,200,200)
starts = [start1, start2, start3,start4,start5,start6,start7]
indice_atual = 1

async def mudar():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                motion_sensor.reset_yaw(0)

                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1
                    await pausa(1)


async def main():
    light_matrix.write("X")
    while indice_atual < len(starts):
        await mudar()




runloop.run(main())
