from hub import light_matrix, port, motion_sensor, button
import runloop, motor, motor_pair


motor_pair.pair(motor_pair.PAIR_1, port.D, port.A)
# DefiniÃ§Ã£o dos pares de motores de locomoÃ§Ã£o

def conversor(x):
    y = (360 * x) / 17.5
    return y  # o valor de y é basicamente dps da conversão de graua para cm ou seja o y são os cm.
# Conversor de graus para cm
async def pausa (tempo):
    await runloop.sleep_ms(tempo)

async def moverAz (distancia,velocidade,aceleracao,kp, referencia):
    def conversor(distancia):
        graus_motor=(distancia*360)/17.5
        return graus_motor

    motor.reset_relative_position(port.A,0)
    distancia_total = conversor(distancia)

    def ajustar_angulo(angulo):
        # Corrige o valor do Ã¢ngulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo



    angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])
    erro_angulo = referencia-angulo_atual

    if abs(erro_angulo)>20:
        await giroAz(referencia, 0.5,0,0)
        while distancia_total>abs(motor.relative_position(port.A)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

    else:
        while distancia_total>abs(motor.relative_position(port.A)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

async def giroAz(angulo, kp, ki,kd):
    # Recupera o valor atual do sensor de giroscÃ³pio em decigraus
    angulo_atual = motion_sensor.tilt_angles()[0]

    # FunÃ§Ã£o para ajustar o Ã¢ngulo para o intervalo [-1790, 1790]
    def ajustar_angulo(angulo):
        # Corrige o valor do Ã¢ngulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    # Ajusta os Ã¢ngulos de destino para o intervalo [-1790, 1790]
    angulo_desejado = ajustar_angulo(angulo)
    angulo_atual = ajustar_angulo(angulo_atual)
    integral = 0
    last_error = 0

    # Determina a direÃ§Ã£o de rotaÃ§Ã£o (sentido horÃ¡rio ou anti-horÃ¡rio)
    while abs(angulo_desejado - angulo_atual) > 20:# Um valor pequeno para precisÃ£o
        erro = angulo_desejado - angulo_atual
        integral=integral+erro
        derivativa= last_error - motion_sensor.tilt_angles()[0]

        correcao = erro * kp + integral * ki + derivativa*kd
        if integral>100:
            integral = 100

        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao * -1), round(correcao))
        last_error = erro
        angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])# Atualiza o Ã¢ngulo atual

    motor_pair.stop(motor_pair.PAIR_1)

async def start1():
    #barquinho
    await moverAz(30,700,5000,0,0)#sai da base azul em direção a mudança de rota de navegação
    await giroAz(-350,0.4,0,0)#se ajusta para realizar a mudança de rota de navegação 
    await pausa(100)#pausa entre o mover e o giro 
    await moverAz(8.1,400,3000,0,-350)#chega na mudança de rota de navegação 
    await motor.run_for_degrees(port.E,750,1100, acceleration=10000)#realiza a mudança de rota de navegação
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,160,0,velocity=-400)#se afasta da mudança da rota de navegação
    await pausa(100)
    motor.run_for_degrees(port.E,-100,1100)#levanta garra para coletar amostra de placton a o mesmo tempo que se afasta da mudança de rota de navegação 
    await giroAz(-70,0.5,0,0)
    await moverAz(26.8,500,3000,0,-70)#vai ate a amostra de plancton
    await motor.run_for_degrees(port.E,370,1100)#desce a garra para a coleta da amostra
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,40,0,velocity=-200) #ré para coleta dos krills
    await motor.run_for_degrees(port.C,150,1100,acceleration=10000)#desce garra que coleta krills e coral
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1100,-1100,-800)#coleta as amostras e vai em diração a o polvo 
    await giroAz(600,1.5,0,0)#gira para realizar o polvo 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,690,0,velocity=500)#realiza o polvo 
    await pausa(200)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1070,-1100,-850)#volta a base azul 

async def start2():
    #primeira travessia
    await moverAz(2,1100,5000,0,0)#vai para frente para ter espaço para fazer curva rumo a o leito marinho 
    await giroAz(450,0.7,0,0)#faz giro de 450 graus 
    await moverAz(93,1000,5000,0.2,450)#vai em direção a o leito marinho 
    await giroAz(0,1,0,0)#fica de frente a frente a o leito marinho 
    await pausa (100)
    await moverAz(11,500,5000,0,0)#alinha e chega no leito marinho 
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,13,-1100,-1100)#pequena ré para realizar leito marinho 
    await motor.run_for_degrees(port.C,70,1100,acceleration=10000)#desce garra de coleta 
    await motor.run_for_degrees(port.E,550,1100,acceleration=3000)#coleta leito marinho e desce  a garra que realiza o peixe-pescador 
    motor.run_for_degrees(port.C,-250,1100,acceleration=5000)#sobe garra de coleta 
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,205,-400,-400)#se afasta do leito marinho em direção do peixe pescador 
    await pausa(100)
    await giroAz(-900,0.5,0,0)#realiza o peixe-pescador
    await moverAz(26,-1100,5000,0,-900)#vai até as coletas 
    motor.run_for_degrees(port.C,-250,1100,acceleration=10000)#sobe garra de coleta 
    await giroAz(-330,0.7,0,0)#gira em direção as coletas e a base vermelha 
    await motor.run_for_degrees(port.C,200,1100,acceleration=10000)#desca garra de coleta 
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1759,-950,-1100)#volta para a base vermelha 


async def start3():
    #start M-01(levanta Ã¡rvore),M-02(TubarÃ£o),M-04(Coleta Mergulhador)
    await moverAz(52.7,400,1000,0.5,0)#vai ate o berçario
    await motor.run_for_degrees(port.C,-600,1100,acceleration=10000) #Cremalheira levanta berçario
    await pausa(200)
    await motor.run_for_degrees(port.E,-800,1000) #Coleta mergulhador e realiza ramos de coral
    await motor.run_for_degrees(port.E,200,1000) 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,1000,0,velocity=-1100, acceleration=10000)#volta a base
    await giroAz(500,2,0,0)#giro para entrar totalmente na base 


async def start4():
    await moverAz(60,650,5000,0.2,0)#vai em direção aos recifes de corais e a entrega do mergulhador 
    await moverAz(23.7,600,500,0,-70)#entrega do mergulhador 
    await motor.run_for_degrees(port.C,-500,1100)#realiza o a M-03(recifes de corais)
    await moverAz(49,-500,4000,-0.2,-200)#se afasta e se ajusta para realizar o levantamento do mastro 
    await giroAz(-540,1.3,0.000005,0)#giro para realizar o mastro 
    await motor.run_for_degrees(port.C,200,1100)#fecha a garra para não bater no mastro 
    await moverAz(30,700,500,0,-540)#chega no mastro 
    await pausa(100)
    await motor.run_for_degrees(port.E,100,1100)#desce garra para a coleta do krill 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,80,0,velocity=-30, acceleration=10000)#se afasta devagar do mastro para coleta do báu 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,660,0,velocity=-600, acceleration=10000)#depois que pegou o báu se afasta rapidamente do mastro 
    await giroAz(-1400,1.5,0,0)#giro para voltar a base
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1000,1100,100)#volta a base

async def start5():
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,120,0,velocity=100)#entrega os segmentos recifais 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,120,0,velocity=-1100)#volta a base
    await giroAz(-750,2,0,0)#curva para encaixar acessorio do tridente 

async def start6():
    #tridente
    await moverAz(56,500,2000,0.4,0)#sai da base vermelha até o tridente 
    await pausa (200)
    await giroAz(480,0.7,00000.1,0)#gira ao tridente 
    await pausa(200)
    await moverAz(21,500,1000,0,480)#chega no tridente e alinha nele
    await motor.run_for_degrees(port.E,-400,1100)#desce garra para coleta do tridente 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,500,0,velocity=-230)#coleta o tridente 
    await giroAz(10,1.5,0,0)#curva para volta a base 
    await moverAz(80,-1100,10000,0,10)#volta a base 



async def start7():
    #travessia
    await moverAz(27, 300,5000,0,0)#pequena ida para a frente para a entrega das amostras 
    await moverAz(67, 1000,5000,0,0)#acelera e entrega o navio no porto 
    await motor.run_for_degrees(port.C,300,1100)#desce garra para realizar o Habitat 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,440,0,velocity=-300)#levanta o Habitat 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,30,0,velocity=-100)#levanta o Habitat 
    await pausa(300)
    await motor.run_for_degrees(port.C,-200,3000,acceleration=10000)#levanta garra do Habitat 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,200,0,velocity=-1100)#se afasta do Habitat artificial 
    await motor.run_for_degrees(port.E,250,1100)#levanta o limitador que leva o carrinho 
    await giroAz(600, 1,0,0)#giro de ajusta para ir para a base 
    await moverAz(14, 700, 5000, 0,600)#se ajusta 
    await pausa(200)
    await giroAz(100, 0.7,0,0)#giro para ir a base azul 
    await pausa(200)

    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,2700,1100,910)#chega na base azul 
    motor.run_for_degrees(port.C,-100,1100)

async def start9():
    #baleia
    await moverAz(63,800,5000,0,0) #vai a baleia
    await giroAz(-370,0.7,0.00001,0)#gira para a baleia
    await moverAz(14,300,500,0,-380)#ativa a baleia
    await motor.run_for_degrees(port.E,-300,-1100,acceleration=5000)#derruba os krills
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,160,0,velocity=-500)#se afasta da baleia
    await giroAz(-900,0.7,0,0)#gira para fazer o sonar
    await moverAz(23,-700,5000,0,-900)#vai ate o sonar 
    await motor.run_for_degrees(port.C,800,1100)#realiza o sonar
    await motor.run_for_degrees(port.C,-100,1100)#gira garra que realiza o sonar para não prender 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,555,0,velocity=-1100)#se afasta do sonar até a compartilhada 
    await giroAz(-1400,0.7,0,0)#ajusta para fazer a compartilhada 
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,390,-400,-400) #chega na compartilhada e realiza a compartilhada
    await pausa(500)#pausa para o submarino ir para o outro lado
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,300,0,velocity=1100)#sai da compartilhada e realiza o polvo....assim acaba o round 


starts = [start1, start2, start3,start4,start5,start6,start7,start9]
indice_atual = 0


async def mudar():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                motion_sensor.reset_yaw(0)

                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1
                    await pausa(1)

async def main():
    light_matrix.write("T")
    while indice_atual < len(starts):
        await mudar()

runloop.run(main())
